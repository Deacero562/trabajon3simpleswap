// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "./LiquidityToken.sol";

/// @title SimpleSwap - Decentralized Token Exchange Contract
/// @notice This contract allows users to add/remove liquidity and swap between two ERC20 tokens
contract SimpleSwap {
    address public tokenA;
    address public tokenB;
    LiquidityToken public liquidityToken;

    uint256 public reserveA;
    uint256 public reserveB;

    /// @notice Emitted when a swap is performed
    event Swap(address indexed sender, address indexed tokenIn, address indexed tokenOut, uint256 amountIn, uint256 amountOut, address to);

    constructor(address _tokenA, address _tokenB) {
        require(_tokenA != _tokenB, "Identical token addresses");
        tokenA = _tokenA;
        tokenB = _tokenB;
        liquidityToken = new LiquidityToken(address(this));
    }

    /// @notice Adds liquidity to the pool and mints liquidity tokens
    function addLiquidity(
        address _tokenA,
        address _tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity) {
        require(block.timestamp <= deadline, "Transaction expired");
        require(_tokenA == tokenA && _tokenB == tokenB, "Invalid token pair");

        amountA = amountADesired;
        amountB = amountBDesired;

        require(amountA >= amountAMin && amountB >= amountBMin, "Insufficient token amounts");

        IERC20(tokenA).transferFrom(msg.sender, address(this), amountA);
        IERC20(tokenB).transferFrom(msg.sender, address(this), amountB);

        uint256 liquidityMinted = (reserveA == 0 && reserveB == 0)
            ? sqrt(amountA * amountB)
            : min((amountA * liquidityToken.totalSupply()) / reserveA, (amountB * liquidityToken.totalSupply()) / reserveB);

        require(liquidityMinted > 0, "Insufficient liquidity minted");

        liquidityToken.mint(to, liquidityMinted);
        reserveA += amountA;
        reserveB += amountB;

        return (amountA, amountB, liquidityMinted);
    }

    /// @notice Removes liquidity and returns token amounts
    function removeLiquidity(
        address _tokenA,
        address _tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB) {
        require(block.timestamp <= deadline, "Transaction expired");
        require(_tokenA == tokenA && _tokenB == tokenB, "Invalid token pair");

        uint256 totalSupply = liquidityToken.totalSupply();
        liquidityToken.burn(msg.sender, liquidity);

        amountA = (liquidity * reserveA) / totalSupply;
        amountB = (liquidity * reserveB) / totalSupply;

        require(amountA >= amountAMin && amountB >= amountBMin, "Insufficient amounts returned");

        IERC20(tokenA).transfer(to, amountA);
        IERC20(tokenB).transfer(to, amountB);

        reserveA -= amountA;
        reserveB -= amountB;

        return (amountA, amountB);
    }

    /// @notice Swaps an exact amount of input tokens for as many output tokens as possible
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts) {
        require(block.timestamp <= deadline, "Transaction expired");
        require(path.length == 2, "Only direct swaps supported");

        address tokenIn = path[0];
        address tokenOut = path[1];
        require(tokenIn == tokenA && tokenOut == tokenB, "Invalid path");

        IERC20(tokenIn).transferFrom(msg.sender, address(this), amountIn);

        uint amountOut = getAmountOut(amountIn, reserveA, reserveB);
        require(amountOut >= amountOutMin, "Insufficient output amount");

        IERC20(tokenOut).transfer(to, amountOut);

        reserveA += amountIn;
        reserveB -= amountOut;

        emit Swap(msg.sender, tokenIn, tokenOut, amountIn, amountOut, to);

        amounts = new uint[](2);
        amounts[0] = amountIn;
        amounts[1] = amountOut;
    }

    /// @notice Returns the price of tokenA in terms of tokenB
    function getPrice(address _tokenA, address _tokenB) external view returns (uint price) {
        require(_tokenA == tokenA && _tokenB == tokenB, "Invalid pair");
        price = (reserveB * 1e18) / reserveA;
    }

    /// @notice Calculates the output amount for a given input amount using constant product formula
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) public pure returns (uint amountOut) {
        require(amountIn > 0 && reserveIn > 0 && reserveOut > 0, "Invalid input");
        uint amountInWithFee = amountIn * 997; // 0.3% fee
        uint numerator = amountInWithFee * reserveOut;
        uint denominator = reserveIn * 1000 + amountInWithFee;
        amountOut = numerator / denominator;
    }

    /// @dev Returns the smaller of two values
    function min(uint x, uint y) internal pure returns (uint) {
        return x < y ? x : y;
    }

    /// @dev Square root using Babylonian method
    function sqrt(uint y) internal pure returns (uint z) {
        if (y > 3) {
            z = y;
            uint x = y / 2 + 1;
            while (x < z) {
                z = x;
                x = (y / x + x) / 2;
            }
        } else if (y != 0) {
            z = 1;
        }
    }
}
